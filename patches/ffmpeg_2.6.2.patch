# WARNING
# This file is downloaded and modified by CMake.
# Manual edits will be overwritten.

diff --git a/libavcodec/avcodec.h b/libavcodec/avcodec.h
index 575dae1..826dc71 100644
--- a/libavcodec/avcodec.h
+++ b/libavcodec/avcodec.h
@@ -532,6 +532,7 @@ enum AVCodecID {
     AV_CODEC_ID_IDF        = MKBETAG( 0 ,'I','D','F'),
     AV_CODEC_ID_OTF        = MKBETAG( 0 ,'O','T','F'),
     AV_CODEC_ID_SMPTE_KLV  = MKBETAG('K','L','V','A'),
+    AV_CODEC_ID_SMPTE_KLV_SYNC  = MKBETAG('K','L','V','S'), //The tag uses KLVA, but needs something different to be able to distinguish it from async streams.
     AV_CODEC_ID_DVD_NAV    = MKBETAG('D','N','A','V'),
     AV_CODEC_ID_TIMED_ID3  = MKBETAG('T','I','D','3'),
     AV_CODEC_ID_BIN_DATA   = MKBETAG('D','A','T','A'),
diff --git a/libavcodec/codec_desc.c b/libavcodec/codec_desc.c
index 32dc1fc..faea5c8 100644
--- a/libavcodec/codec_desc.c
+++ b/libavcodec/codec_desc.c
@@ -2735,6 +2735,12 @@ static const AVCodecDescriptor codec_descriptors[] = {
         .long_name = NULL_IF_CONFIG_SMALL("SMPTE 336M Key-Length-Value (KLV) metadata"),
     },
     {
+        .id        = AV_CODEC_ID_SMPTE_KLV_SYNC,
+        .type      = AVMEDIA_TYPE_DATA,
+        .name      = "klvSync",
+        .long_name = NULL_IF_CONFIG_SMALL("SMPTE 336M Key-Length-Value (KLV) synchronous metadata"),
+    },
+    {
         .id        = AV_CODEC_ID_DVD_NAV,
         .type      = AVMEDIA_TYPE_DATA,
         .name      = "dvd_nav_packet",
diff --git a/libavformat/mpegts.c b/libavformat/mpegts.c
index 9e9ad47..992aed9 100644
--- a/libavformat/mpegts.c
+++ b/libavformat/mpegts.c
@@ -712,14 +712,14 @@ static const StreamType REGD_types[] = {
     { MKTAG('D', 'T', 'S', '2'), AVMEDIA_TYPE_AUDIO, AV_CODEC_ID_DTS   },
     { MKTAG('D', 'T', 'S', '3'), AVMEDIA_TYPE_AUDIO, AV_CODEC_ID_DTS   },
     { MKTAG('H', 'E', 'V', 'C'), AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_HEVC  },
-    { MKTAG('K', 'L', 'V', 'A'), AVMEDIA_TYPE_DATA,  AV_CODEC_ID_SMPTE_KLV },
+    { MKTAG('K', 'L', 'V', 'A'), AVMEDIA_TYPE_DATA,  AV_CODEC_ID_SMPTE_KLV }, // The async KLV uses a registration descriptor so this add will catch it.
     { MKTAG('V', 'C', '-', '1'), AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_VC1   },
     { MKTAG('O', 'p', 'u', 's'), AVMEDIA_TYPE_AUDIO, AV_CODEC_ID_OPUS  },
     { 0 },
 };
 
 static const StreamType METADATA_types[] = {
-    { MKTAG('K','L','V','A'), AVMEDIA_TYPE_DATA, AV_CODEC_ID_SMPTE_KLV },
+    { MKTAG('K','L','V','A'), AVMEDIA_TYPE_DATA, AV_CODEC_ID_SMPTE_KLV_SYNC }, //The sync doesn't have the registration descriptor, but does use the metadata descriptor. Async also uses this, but will be caught in the REGD type because of the order of the checks.
     { MKTAG('I','D','3',' '), AVMEDIA_TYPE_DATA, AV_CODEC_ID_TIMED_ID3 },
     { 0 },
 };
@@ -1103,12 +1103,14 @@ skip:
                     p += sl_header_bytes;
                     buf_size -= sl_header_bytes;
                 }
-                if (pes->stream_type == 0x15 && buf_size >= 5) {
-                    /* skip metadata access unit header */
-                    pes->pes_header_size += 5;
-                    p += 5;
-                    buf_size -= 5;
-                }
+				//TODO: Synchronous KLV streams have one or more metadata access unit headers within the stream
+				// The below check only removes the first one and thus causes problems if more than one exists.
+                //if (pes->stream_type == 0x15 && buf_size >= 5) {
+                //    /* skip metadata access unit header */
+                //    pes->pes_header_size += 5;
+                //    p += 5;
+                //    buf_size -= 5;
+                //}
                 if (pes->ts->fix_teletext_pts && pes->st->codec->codec_id == AV_CODEC_ID_DVB_TELETEXT) {
                     AVProgram *p = NULL;
                     while ((p = av_find_program_from_stream(pes->stream, p, pes->st->index))) {
diff --git a/libavformat/mpegts.h b/libavformat/mpegts.h
index 84f3098..5efb1cd 100644
--- a/libavformat/mpegts.h
+++ b/libavformat/mpegts.h
@@ -51,6 +51,7 @@
 #define STREAM_TYPE_AUDIO_AAC       0x0f
 #define STREAM_TYPE_AUDIO_AAC_LATM  0x11
 #define STREAM_TYPE_VIDEO_MPEG4     0x10
+#define STREAM_TYPE_DATA_KLV_SYNC   0x15
 #define STREAM_TYPE_VIDEO_H264      0x1b
 #define STREAM_TYPE_VIDEO_HEVC      0x24
 #define STREAM_TYPE_VIDEO_CAVS      0x42
diff --git a/libavformat/mpegtsenc.c b/libavformat/mpegtsenc.c
index cc650bb..c55cc1a 100644
--- a/libavformat/mpegtsenc.c
+++ b/libavformat/mpegtsenc.c
@@ -309,6 +309,9 @@ static int mpegts_write_pmt(AVFormatContext *s, MpegTSService *service)
         case AV_CODEC_ID_TRUEHD:
             stream_type = STREAM_TYPE_AUDIO_TRUEHD;
             break;
+        case AV_CODEC_ID_SMPTE_KLV_SYNC:
+            stream_type = STREAM_TYPE_DATA_KLV_SYNC;
+            break;
         default:
             stream_type = STREAM_TYPE_PRIVATE_DATA;
             break;
@@ -474,6 +477,36 @@ static int mpegts_write_pmt(AVFormatContext *s, MpegTSService *service)
                 *q++ = 'V';
                 *q++ = 'A';
             }
+            if (st->codec->codec_id == AV_CODEC_ID_SMPTE_KLV_SYNC || st->codec->codec_id == AV_CODEC_ID_SMPTE_KLV) {
+				//Begin metadata_descriptor
+                *q++ = 0x26;
+                *q++ = 0x09;
+				//begin metadata_application_format
+                *q++ = 0x01;
+                *q++ = 0x00;
+				//beging metadata_format
+                *q++ = 0xFF;
+                *q++ = 'K';
+                *q++ = 'L';
+                *q++ = 'V';
+                *q++ = 'A';
+                *q++ = 0x00;
+                *q++ = 0x0f;
+				//begin metadata_std_descriptor
+                *q++ = 0x27;
+                *q++ = 0x09;
+				//2 reserved bits and metadata_input_leak_rate
+                *q++ = 0xC0;
+                *q++ = 0x02;//0x00;
+                *q++ = 0x71;//0x00;//0x04;
+				//2 reserved bits followed by metadata_buffer_size
+                *q++ = 0xC0;
+                *q++ = 0x00;
+                *q++ = 0x02;//0x00
+				//2 reserved bits followed be metadata_output_leak_Rate
+                *q++ = 0xC0;
+                *q++ = 0x00;
+                *q++ = 0x00;			}
             break;
         }
 
